name: Deploy on Raspberry Pi

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Deploy Convex
        run: npx convex deploy
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}

      - name: Build Vite app
        run: npm run build

      - name: Install cloudflared
        run: |
          curl -L https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/cloudflare-archive-keyring.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt update
          sudo apt install -y cloudflared
          cloudflared --version

      - name: Setup SSH for Cloudflare Tunnel
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PI_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # write SSH config safely
          {
            echo "Host r1"
            echo "  HostName ${{ secrets.PI_HOST }}"
            echo "  User ${{ secrets.PI_USER }}"
            echo "  ProxyCommand $(which cloudflared) access ssh --hostname %h --id ${{ secrets.CF_TOKEN_ID }} --secret ${{ secrets.CF_TOKEN_SECRET }}"
            echo "  IdentityFile ~/.ssh/id_ed25519"
            echo "  StrictHostKeyChecking yes"
          } > ~/.ssh/config

          chmod 600 ~/.ssh/config

      - name: Debug SSH connection
        run: ssh -vvv r1 echo "SSH connection successful"

      - name: Deploy to Raspberry Pi
        run: |
          for i in 1 2 3; do
            rsync -azvv --progress -e "ssh -F $HOME/.ssh/config" --rsync-path="sudo rsync" dist/ r1:/var/www/rhythmix
            rsync_exit=$?
            echo "rsync exit code: $rsync_exit"
            [ $rsync_exit -eq 0 ] && break
            sleep 5
          done
